% OUTPUT DEMANDED GENERATOR
c(S,odg,0) :- subsystem(S),
	c(S,ig,not_running).
c(S,odg,0) :- subsystem(S),
	c(S,ig,running),
	c(S,il,L),
	p(S,ipext,E),
	L < E.
c(S,odg,DIFF) :- subsystem(S),
	c(S,ig,running),
	c(S,il,L),
	p(S,ipext,E),
	L >= E,
	DIFF = L - E.

% OUTPUT POWER BATTERY
p(S,opb,DIFF) :- subsystem(S),
	c(S,il,L),
	p(S,ipext,E),
	L <= E,
	DIFF = E - L.
p(S,obp,0) :- subsystem(S),
	c(S,il,L),
	p(S,ipext,E),
	L > E.

% OUTPUT DEMANDED BATTERY
c(S,odb,0) :- subsystem(S),
	c(S,ig,running).
c(S,odb,0) :- subsystem(S),
	c(S,il,L),
	p(S,ipext,E),
	L <= E.
c(S,odb,DIFF) :- subsystem(S),
	c(S,ig,not_running),
	c(S,il,L),
	p(S,ipext,E),
	L > E,
	DIFF = L - E.

% OUTPUT POWER SYSTEM
p(S,ops,P) :- subsystem(S), 
	c(S,il,L),
	adjl(L,ADJL),
	powsum(S,P),
	ADJL > P.
p(S,ops,ADJL) :- subsystem(S), 
	c(S,il,L),
	adjl(L,ADJL),
	powsum(S,P),
	ADJL <= P.

% HELPING PREDICATES
powsum(S,POWER) :- subsystem(S),
	p(S,ipext,IN),
	p(S,ipg,G),
	p(S,ipb,B), 
	SUM1 = G + B,
	POWER = SUM1 + IN.

adjl(L,ADJ) :-
	X = L * 3,
	ADJ = X / 2,
	#int(L),
	#int(ADJL).
